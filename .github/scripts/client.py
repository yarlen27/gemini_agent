import os
import json
import requests
import subprocess
import logging
from datetime import datetime

# --- Logging Setup ---
# Create a unique log file for each run
log_filename = f"client_run_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_filename),
        logging.StreamHandler() # Also print to console
    ]
)
logger = logging.getLogger(__name__)

logger.info(f"--- Client Script Started --- Log file: {log_filename}")

# Read GitHub environment variables
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
ISSUE_TITLE = os.getenv("ISSUE_TITLE")
ISSUE_BODY = os.getenv("ISSUE_BODY")
ISSUE_NUMBER = os.getenv("ISSUE_NUMBER")
PROMPT_BODY = os.getenv("PROMPT_BODY")
GEMINI_AGENT_API_URL = os.getenv("GEMINI_AGENT_API_URL")

logger.info(f"Initial Environment Variables:")
logger.info(f"  Issue Title: {ISSUE_TITLE}")
logger.info(f"  Issue Body: {ISSUE_BODY}")
logger.info(f"  Prompt Body: {PROMPT_BODY}")
logger.info(f"  API URL: {GEMINI_AGENT_API_URL}")

# Create a new branch for the changes
BRANCH_NAME = f"gemini-issue-{ISSUE_NUMBER}"
logger.info(f"Creating new branch: {BRANCH_NAME}")
try:
    subprocess.run(f"git checkout -b {BRANCH_NAME}", shell=True, check=True)
    subprocess.run(f"git push origin {BRANCH_NAME}", shell=True, check=True) # Push empty branch
except subprocess.CalledProcessError as e:
    logger.error(f"Error creating branch: {e.stderr}")
    exit(1)

conversation_id = None

def run_shell_command(command: str):
    logger.info(f"Executing command: {command}")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, check=True)
        stdout = result.stdout
        stderr = result.stderr
        exit_code = result.returncode
        logger.info(f"Command Stdout:\n{stdout}")
        if stderr:
            logger.warning(f"Command Stderr:\n{stderr}")
        return {"tool_name": "run_shell_command", "command": command, "stdout": stdout, "stderr": stderr, "exit_code": exit_code}
    except subprocess.CalledProcessError as e:
        logger.error(f"Command failed with error: {e.stderr}")
        return {"tool_name": "run_shell_command", "command": command, "stdout": e.stdout, "stderr": e.stderr, "exit_code": e.returncode}
    except Exception as e:
        logger.critical(f"An unexpected error occurred: {e}")
        return {"tool_name": "run_shell_command", "command": command, "stdout": "", "stderr": str(e), "exit_code": 1}

while True:
    request_body = {}
    if conversation_id:
        request_body["conversation_id"] = conversation_id
    
    if not conversation_id and PROMPT_BODY:
        request_body["prompt"] = {
            "issue_title": ISSUE_TITLE,
            "issue_body": ISSUE_BODY,
            "github_context": {
                "issue_number": ISSUE_NUMBER,
                "prompt_body": PROMPT_BODY
            }
        }
    # TODO: Add tool_response if applicable

    logger.info(f"Sending API request: {json.dumps(request_body, indent=2)}")
    try:
        response = requests.post(f"{GEMINI_AGENT_API_URL}/v1/github/execute", json=request_body)
        response.raise_for_status() # Raise an exception for HTTP errors
        agent_response = response.json()
        logger.info(f"Received API Response: {json.dumps(agent_response, indent=2)}")

        conversation_id = agent_response["conversation_id"]

        action = agent_response["action"]
        logger.info(f"Agent Action: {action}")
        if action == "finish":
            logger.info(f"Agent finished with message: {agent_response.get('message', 'No message')}")
            # Commit changes and create PR
            try:
                subprocess.run("git add .", shell=True, check=True)
                subprocess.run(["git", "commit", "-m", f"feat: Resolves #{ISSUE_NUMBER} - {ISSUE_TITLE}"], check=True)
                subprocess.run(f"git push origin {BRANCH_NAME}", shell=True, check=True)
                
                pr_title = f"feat(issue-{ISSUE_NUMBER}): {ISSUE_TITLE}"
                pr_body = f"Resolves #{ISSUE_NUMBER}\n\nThis PR was automatically generated by Gemini.\n\nAgent's final message:\n{agent_response.get('message', 'No message')}"
                logger.info(f"Creating Pull Request with title: {pr_title}")
                logger.info(f"PR Body: {pr_body}")
                subprocess.run(f"gh pr create --base main --head {BRANCH_NAME} --title \"{pr_title}\" --body \"{pr_body}\"", shell=True, check=True)
                logger.info(f"Pull Request created for branch {BRANCH_NAME}")
            except subprocess.CalledProcessError as e:
                logger.error(f"Error creating PR: {e}")
                exit(1)
            break
        elif action == "run_shell_command":
            tool_result = run_shell_command(agent_response["command"])
            # Send tool_result back to the server in the next iteration
            request_body["tool_response"] = tool_result
            continue # Continue the loop to send the tool_response
        elif action == "read_file":
            logger.info(f"Agent requested to read file: {agent_response['file_path']}")
            file_path = agent_response["file_path"]
            try:
                with open(file_path, 'r') as f:
                    content = f.read()
                tool_result = {"tool_name": "read_file", "file_path": file_path, "content": content}
            except FileNotFoundError:
                tool_result = {"tool_name": "read_file", "file_path": file_path, "stderr": "File not found", "exit_code": 1}
            except Exception as e:
                tool_result = {"tool_name": "read_file", "file_path": file_path, "stderr": str(e), "exit_code": 1}
            request_body["tool_response"] = tool_result
            continue # Continue the loop to send the tool_response
        elif action == "write_file":
            logger.info(f"Agent requested to write file: {agent_response['file_path']}")
            file_path = agent_response["file_path"]
            content = agent_response["content"]
            try:
                # Ensure directory exists
                os.makedirs(os.path.dirname(file_path), exist_ok=True)
                with open(file_path, 'w') as f:
                    f.write(content)
                tool_result = {"tool_name": "write_file", "file_path": file_path, "stdout": "File written successfully"}
            except Exception as e:
                tool_result = {"tool_name": "write_file", "file_path": file_path, "stderr": str(e), "exit_code": 1}
            request_body["tool_response"] = tool_result
            continue # Continue the loop to send the tool_response
        else:
            logger.error(f"Unknown action: {action}")
            break

    except requests.exceptions.RequestException as e:
        logger.critical(f"Error making API call: {e}")
        exit(1)

logger.info(f"--- Client Script Finished ---")
