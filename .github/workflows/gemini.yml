name: Gemini Code Assistant

on:
  issue_comment:
    types: [created]
  issues:
    types: [opened]

jobs:
  gemini-agent:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@gemini')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@gemini') || contains(github.event.issue.title, '@gemini')))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write # Needed for Workload Identity Federation if used

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for better context

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: pip install requests

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Initial Gemini Comment
        id: initial_comment
        run: |
          COMMENT_ID=$(gh issue comment ${{ github.event.issue.number }} --body "ðŸ”· Gemini is working...

          I'll analyze this and get back to you.

          [View job run â†’](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" --json id --jq .id)
          echo "comment_id=$COMMENT_ID" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Gemini Agent Client
        id: gemini
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          # If it's a comment, use the comment body as the main prompt
          PROMPT_BODY: ${{ github.event.comment.body || github.event.issue.body }}
          # Our API server URL
          GEMINI_AGENT_API_URL: "https://gemini.27cobalto.com"
          # Pass the comment ID to edit later
          INITIAL_COMMENT_ID: ${{ steps.initial_comment.outputs.comment_id }}
        run: python .github/scripts/client.py

      - name: Create Pull Request
        if: steps.gemini.outputs.branch_name
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.gemini.outputs.branch_name }}
          title: 'feat(issue-${{ github.event.issue.number }}): ${{ github.event.issue.title }}'
          body: |
            Resolves #${{ github.event.issue.number }}
            
            This PR was automatically generated by Gemini.
          commit-message: 'feat: Resolves issue #${{ github.event.issue.number }}'
